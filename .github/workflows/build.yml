name: Build Electron Forge

on:
  workflow_dispatch:

jobs:
  version_bump:
    name: Prepare Electron Forge
    runs-on: ubuntu-latest
    steps:

      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: main

      - name: Install dependencies
        working-directory: ./desktop
        run: npm install
        
      - name: Release
        working-directory: ./desktop
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: npx semantic-release

  # build:
  #   needs: version_bump
  #   name: Build Electron Forge
  #   runs-on: ${{ matrix.os }}
  #   strategy:
  #     matrix:
  #       # os: [macos-latest, ubuntu-latest, windows-latest]
  #       os: [ubuntu-latest]

  #   steps:
  #     - name: Clone main
  #       uses: actions/checkout@v4
  #       with:
  #         ref: main

  #     - name: Setup NodeJs
  #       uses: actions/setup-node@v4
  #       with:
  #         node-version: '22.x'

  #     - name: Install dependencies
  #       working-directory: ./desktop
  #       run: npm install

  #     - name: Build
  #       working-directory: ./desktop
  #       run: npm run make

  #     - name: App Version
  #       id: app-version
  #       uses: martinbeentjes/npm-get-version-action@v1.3.1
  #       with:
  #         path: './desktop'

  #     - name: Upload artifact
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: "Build for ${{ matrix.os }} - version ${{ steps.app-version.outputs.current-version}}"
  #         path: desktop/out/

  create_downloads_json:
    needs: version_bump
    name: Create Downloads JSON
    runs-on: ubuntu-latest
    steps:
      
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: main

      - name: Create release JSON
        run: |
          node -e "
            const fs = require('fs');
            const path = require('path');
            const version = require('./desktop/package.json').version;
            const releaseDir = path.join(__dirname, 'desktop', 'releases');

            if(!fs.existsSync(releaseDir)) {
              fs.mkdirSync(releaseDir);
            }
            
            const release = {
              version,
              updateTo: {
                version,
                url: 'http://google.com/desktop/mac-os/' + version + '/file.zip',
                pub_date: new Date().toISOString(),
              }
            };
            
            fs.writeFileSync(path.join(__dirname, 'desktop', 'releases', 'v' + version + '.json'), JSON.stringify(release, null, 2));
          "

      - name: Compile release.json from JSON files
        run: |
          node -e "
            const fs = require('fs');
            const path = require('path');
            const version = require('./desktop/package.json').version;
            const allReleasesPath = path.join(__dirname, 'desktop', 'releases');
            const releases = [];

            fs.readdir(allReleasesPath, (err, files) => {
              if (err) {
                console.error('Error reading directory:', err);
                return;
              }
            
              // Sort the files array alphabetically
              files.sort((a, b) => a.localeCompare(b)); // Use localeCompare for proper alphabetical sorting
            
              files.forEach(file => {
                fs.readFile(allReleasesPath + '/' + file, 'utf8', (err, data) => {
                  if (err) {
                    console.error(err);
                    return;
                  }

                  console.log(data);
                  releases.push(data);
                });
              });
            });
            
            const releaseSummary = {
              currentRelease: version,
              releases,
            };
            
            fs.writeFileSync(path.join(__dirname, 'desktop', 'RELEASE.json'), JSON.stringify(releaseSummary, null, 2));
          "

      - name: Commit release JSON
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add desktop/releases/\*
          git add desktop/RELEASE.json
          git commit -m "[AUTO] Add new release"

      - name: Push changes
        uses: ad-m/github-push-action@master
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          branch: main

      # - name: Upload release.json
      #   uses: actions/upload-artifact@v4
      #   with:
      #     path: desktop/release.json
      #     name: release
      #     overwrite: true
      #     compression-level: 0 # no compression
